// Code generated by MockGen. DO NOT EDIT.
// Source: domain/application.go

// Package mock_domain is a generated GoMock package.
package mocks

import (
	domain "github.com/fabiodmferreira/crypto-trading/domain"
	gomock "github.com/golang/mock/gomock"
	bson "go.mongodb.org/mongo-driver/bson"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
	reflect "reflect"
	time "time"
)

// MockApplicationRepository is a mock of ApplicationRepository interface
type MockApplicationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationRepositoryMockRecorder
}

// MockApplicationRepositoryMockRecorder is the mock recorder for MockApplicationRepository
type MockApplicationRepositoryMockRecorder struct {
	mock *MockApplicationRepository
}

// NewMockApplicationRepository creates a new mock instance
func NewMockApplicationRepository(ctrl *gomock.Controller) *MockApplicationRepository {
	mock := &MockApplicationRepository{ctrl: ctrl}
	mock.recorder = &MockApplicationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockApplicationRepository) EXPECT() *MockApplicationRepositoryMockRecorder {
	return m.recorder
}

// FindByID mocks base method
func (m *MockApplicationRepository) FindByID(id string) (*domain.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*domain.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID
func (mr *MockApplicationRepositoryMockRecorder) FindByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockApplicationRepository)(nil).FindByID), id)
}

// Create mocks base method
func (m *MockApplicationRepository) Create(asset string, options domain.ApplicationOptions, acountID primitive.ObjectID) (*domain.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", asset, options, acountID)
	ret0, _ := ret[0].(*domain.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockApplicationRepositoryMockRecorder) Create(asset, options, acountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockApplicationRepository)(nil).Create), asset, options, acountID)
}

// FindAll mocks base method
func (m *MockApplicationRepository) FindAll() (*[]domain.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].(*[]domain.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll
func (mr *MockApplicationRepositoryMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockApplicationRepository)(nil).FindAll))
}

// DeleteByID mocks base method
func (m *MockApplicationRepository) DeleteByID(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID
func (mr *MockApplicationRepositoryMockRecorder) DeleteByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockApplicationRepository)(nil).DeleteByID), id)
}

// MockApplicationService is a mock of ApplicationService interface
type MockApplicationService struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationServiceMockRecorder
}

// MockApplicationServiceMockRecorder is the mock recorder for MockApplicationService
type MockApplicationServiceMockRecorder struct {
	mock *MockApplicationService
}

// NewMockApplicationService creates a new mock instance
func NewMockApplicationService(ctrl *gomock.Controller) *MockApplicationService {
	mock := &MockApplicationService{ctrl: ctrl}
	mock.recorder = &MockApplicationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockApplicationService) EXPECT() *MockApplicationServiceMockRecorder {
	return m.recorder
}

// FindAll mocks base method
func (m *MockApplicationService) FindAll() (*[]domain.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].(*[]domain.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll
func (mr *MockApplicationServiceMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockApplicationService)(nil).FindAll))
}

// GetLastState mocks base method
func (m *MockApplicationService) GetLastState(appID primitive.ObjectID) (*domain.ApplicationExecutionState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastState", appID)
	ret0, _ := ret[0].(*domain.ApplicationExecutionState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastState indicates an expected call of GetLastState
func (mr *MockApplicationServiceMockRecorder) GetLastState(appID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastState", reflect.TypeOf((*MockApplicationService)(nil).GetLastState), appID)
}

// DeleteByID mocks base method
func (m *MockApplicationService) DeleteByID(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID
func (mr *MockApplicationServiceMockRecorder) DeleteByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockApplicationService)(nil).DeleteByID), id)
}

// GetLogEvents mocks base method
func (m *MockApplicationService) GetLogEvents(appID primitive.ObjectID) (*[]domain.EventLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogEvents", appID)
	ret0, _ := ret[0].(*[]domain.EventLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogEvents indicates an expected call of GetLogEvents
func (mr *MockApplicationServiceMockRecorder) GetLogEvents(appID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogEvents", reflect.TypeOf((*MockApplicationService)(nil).GetLogEvents), appID)
}

// GetStateAggregated mocks base method
func (m *MockApplicationService) GetStateAggregated(appID string, startDate, endDate time.Time) (*[]bson.M, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStateAggregated", appID, startDate, endDate)
	ret0, _ := ret[0].(*[]bson.M)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStateAggregated indicates an expected call of GetStateAggregated
func (mr *MockApplicationServiceMockRecorder) GetStateAggregated(appID, startDate, endDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStateAggregated", reflect.TypeOf((*MockApplicationService)(nil).GetStateAggregated), appID, startDate, endDate)
}
