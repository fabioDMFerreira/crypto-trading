// Code generated by MockGen. DO NOT EDIT.
// Source: domain/notification.go

// Package mock_domain is a generated GoMock package.
package mocks

import (
	domain "github.com/fabiodmferreira/crypto-trading/domain"
	gomock "github.com/golang/mock/gomock"
	bson "go.mongodb.org/mongo-driver/bson"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
	reflect "reflect"
	time "time"
)

// MockNotificationsService is a mock of NotificationsService interface
type MockNotificationsService struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationsServiceMockRecorder
}

// MockNotificationsServiceMockRecorder is the mock recorder for MockNotificationsService
type MockNotificationsServiceMockRecorder struct {
	mock *MockNotificationsService
}

// NewMockNotificationsService creates a new mock instance
func NewMockNotificationsService(ctrl *gomock.Controller) *MockNotificationsService {
	mock := &MockNotificationsService{ctrl: ctrl}
	mock.recorder = &MockNotificationsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNotificationsService) EXPECT() *MockNotificationsServiceMockRecorder {
	return m.recorder
}

// FindLastEventLogsNotificationDate mocks base method
func (m *MockNotificationsService) FindLastEventLogsNotificationDate() (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLastEventLogsNotificationDate")
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLastEventLogsNotificationDate indicates an expected call of FindLastEventLogsNotificationDate
func (mr *MockNotificationsServiceMockRecorder) FindLastEventLogsNotificationDate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLastEventLogsNotificationDate", reflect.TypeOf((*MockNotificationsService)(nil).FindLastEventLogsNotificationDate))
}

// CreateEmailNotification mocks base method
func (m *MockNotificationsService) CreateEmailNotification(subject, message, notificationType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmailNotification", subject, message, notificationType)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEmailNotification indicates an expected call of CreateEmailNotification
func (mr *MockNotificationsServiceMockRecorder) CreateEmailNotification(subject, message, notificationType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmailNotification", reflect.TypeOf((*MockNotificationsService)(nil).CreateEmailNotification), subject, message, notificationType)
}

// ShouldSendNotification mocks base method
func (m *MockNotificationsService) ShouldSendNotification() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldSendNotification")
	ret0, _ := ret[0].(bool)
	return ret0
}

// ShouldSendNotification indicates an expected call of ShouldSendNotification
func (mr *MockNotificationsServiceMockRecorder) ShouldSendNotification() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldSendNotification", reflect.TypeOf((*MockNotificationsService)(nil).ShouldSendNotification))
}

// BulkDeleteByApplicationID mocks base method
func (m *MockNotificationsService) BulkDeleteByApplicationID(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkDeleteByApplicationID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkDeleteByApplicationID indicates an expected call of BulkDeleteByApplicationID
func (mr *MockNotificationsServiceMockRecorder) BulkDeleteByApplicationID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkDeleteByApplicationID", reflect.TypeOf((*MockNotificationsService)(nil).BulkDeleteByApplicationID), id)
}

// SendEmail mocks base method
func (m *MockNotificationsService) SendEmail(subject, body string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmail", subject, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmail indicates an expected call of SendEmail
func (mr *MockNotificationsServiceMockRecorder) SendEmail(subject, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockNotificationsService)(nil).SendEmail), subject, body)
}

// MockNotificationsRepository is a mock of NotificationsRepository interface
type MockNotificationsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationsRepositoryMockRecorder
}

// MockNotificationsRepositoryMockRecorder is the mock recorder for MockNotificationsRepository
type MockNotificationsRepositoryMockRecorder struct {
	mock *MockNotificationsRepository
}

// NewMockNotificationsRepository creates a new mock instance
func NewMockNotificationsRepository(ctrl *gomock.Controller) *MockNotificationsRepository {
	mock := &MockNotificationsRepository{ctrl: ctrl}
	mock.recorder = &MockNotificationsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNotificationsRepository) EXPECT() *MockNotificationsRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockNotificationsRepository) Create(notification *domain.Notification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", notification)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockNotificationsRepositoryMockRecorder) Create(notification interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNotificationsRepository)(nil).Create), notification)
}

// FindLastEventLogsNotificationDate mocks base method
func (m *MockNotificationsRepository) FindLastEventLogsNotificationDate() (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLastEventLogsNotificationDate")
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLastEventLogsNotificationDate indicates an expected call of FindLastEventLogsNotificationDate
func (mr *MockNotificationsRepositoryMockRecorder) FindLastEventLogsNotificationDate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLastEventLogsNotificationDate", reflect.TypeOf((*MockNotificationsRepository)(nil).FindLastEventLogsNotificationDate))
}

// Sent mocks base method
func (m *MockNotificationsRepository) Sent(id primitive.ObjectID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sent", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Sent indicates an expected call of Sent
func (mr *MockNotificationsRepositoryMockRecorder) Sent(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sent", reflect.TypeOf((*MockNotificationsRepository)(nil).Sent), id)
}

// BulkDelete mocks base method
func (m *MockNotificationsRepository) BulkDelete(filter bson.M) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkDelete", filter)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkDelete indicates an expected call of BulkDelete
func (mr *MockNotificationsRepositoryMockRecorder) BulkDelete(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkDelete", reflect.TypeOf((*MockNotificationsRepository)(nil).BulkDelete), filter)
}

// BulkDeleteByApplicationID mocks base method
func (m *MockNotificationsRepository) BulkDeleteByApplicationID(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkDeleteByApplicationID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkDeleteByApplicationID indicates an expected call of BulkDeleteByApplicationID
func (mr *MockNotificationsRepositoryMockRecorder) BulkDeleteByApplicationID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkDeleteByApplicationID", reflect.TypeOf((*MockNotificationsRepository)(nil).BulkDeleteByApplicationID), id)
}
