// Code generated by MockGen. DO NOT EDIT.
// Source: domain/account.go

// Package mock_domain is a generated GoMock package.
package mocks

import (
	domain "github.com/fabiodmferreira/crypto-trading/domain"
	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
	reflect "reflect"
	time "time"
)

// MockAccountsRepository is a mock of AccountsRepository interface
type MockAccountsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAccountsRepositoryMockRecorder
}

// MockAccountsRepositoryMockRecorder is the mock recorder for MockAccountsRepository
type MockAccountsRepositoryMockRecorder struct {
	mock *MockAccountsRepository
}

// NewMockAccountsRepository creates a new mock instance
func NewMockAccountsRepository(ctrl *gomock.Controller) *MockAccountsRepository {
	mock := &MockAccountsRepository{ctrl: ctrl}
	mock.recorder = &MockAccountsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccountsRepository) EXPECT() *MockAccountsRepositoryMockRecorder {
	return m.recorder
}

// FindById mocks base method
func (m *MockAccountsRepository) FindById(id primitive.ObjectID) (*domain.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", id)
	ret0, _ := ret[0].(*domain.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById
func (mr *MockAccountsRepositoryMockRecorder) FindById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockAccountsRepository)(nil).FindById), id)
}

// FindByBroker mocks base method
func (m *MockAccountsRepository) FindByBroker(broker string) (*domain.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByBroker", broker)
	ret0, _ := ret[0].(*domain.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByBroker indicates an expected call of FindByBroker
func (mr *MockAccountsRepositoryMockRecorder) FindByBroker(broker interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByBroker", reflect.TypeOf((*MockAccountsRepository)(nil).FindByBroker), broker)
}

// Create mocks base method
func (m *MockAccountsRepository) Create(broker string, amount float32) (*domain.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", broker, amount)
	ret0, _ := ret[0].(*domain.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockAccountsRepositoryMockRecorder) Create(broker, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAccountsRepository)(nil).Create), broker, amount)
}

// Withdraw mocks base method
func (m *MockAccountsRepository) Withdraw(id primitive.ObjectID, amount float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", id, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// Withdraw indicates an expected call of Withdraw
func (mr *MockAccountsRepositoryMockRecorder) Withdraw(id, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockAccountsRepository)(nil).Withdraw), id, amount)
}

// Deposit mocks base method
func (m *MockAccountsRepository) Deposit(id primitive.ObjectID, amount float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deposit", id, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deposit indicates an expected call of Deposit
func (mr *MockAccountsRepositoryMockRecorder) Deposit(id, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deposit", reflect.TypeOf((*MockAccountsRepository)(nil).Deposit), id, amount)
}

// MockAccountServiceReader is a mock of AccountServiceReader interface
type MockAccountServiceReader struct {
	ctrl     *gomock.Controller
	recorder *MockAccountServiceReaderMockRecorder
}

// MockAccountServiceReaderMockRecorder is the mock recorder for MockAccountServiceReader
type MockAccountServiceReaderMockRecorder struct {
	mock *MockAccountServiceReader
}

// NewMockAccountServiceReader creates a new mock instance
func NewMockAccountServiceReader(ctrl *gomock.Controller) *MockAccountServiceReader {
	mock := &MockAccountServiceReader{ctrl: ctrl}
	mock.recorder = &MockAccountServiceReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccountServiceReader) EXPECT() *MockAccountServiceReaderMockRecorder {
	return m.recorder
}

// GetAmount mocks base method
func (m *MockAccountServiceReader) GetAmount() (float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAmount")
	ret0, _ := ret[0].(float32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAmount indicates an expected call of GetAmount
func (mr *MockAccountServiceReaderMockRecorder) GetAmount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAmount", reflect.TypeOf((*MockAccountServiceReader)(nil).GetAmount))
}

// FindPendingAssets mocks base method
func (m *MockAccountServiceReader) FindPendingAssets() (*[]domain.Asset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPendingAssets")
	ret0, _ := ret[0].(*[]domain.Asset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPendingAssets indicates an expected call of FindPendingAssets
func (mr *MockAccountServiceReaderMockRecorder) FindPendingAssets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPendingAssets", reflect.TypeOf((*MockAccountServiceReader)(nil).FindPendingAssets))
}

// FindAllAssets mocks base method
func (m *MockAccountServiceReader) FindAllAssets() (*[]domain.Asset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllAssets")
	ret0, _ := ret[0].(*[]domain.Asset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllAssets indicates an expected call of FindAllAssets
func (mr *MockAccountServiceReaderMockRecorder) FindAllAssets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllAssets", reflect.TypeOf((*MockAccountServiceReader)(nil).FindAllAssets))
}

// GetBalance mocks base method
func (m *MockAccountServiceReader) GetBalance(startDate, endDate time.Time) (float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", startDate, endDate)
	ret0, _ := ret[0].(float32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance
func (mr *MockAccountServiceReaderMockRecorder) GetBalance(startDate, endDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockAccountServiceReader)(nil).GetBalance), startDate, endDate)
}

// CheckAssetWithCloserPriceExists mocks base method
func (m *MockAccountServiceReader) CheckAssetWithCloserPriceExists(price, limit float32) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAssetWithCloserPriceExists", price, limit)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAssetWithCloserPriceExists indicates an expected call of CheckAssetWithCloserPriceExists
func (mr *MockAccountServiceReaderMockRecorder) CheckAssetWithCloserPriceExists(price, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAssetWithCloserPriceExists", reflect.TypeOf((*MockAccountServiceReader)(nil).CheckAssetWithCloserPriceExists), price, limit)
}

// MockAccountService is a mock of AccountService interface
type MockAccountService struct {
	ctrl     *gomock.Controller
	recorder *MockAccountServiceMockRecorder
}

// MockAccountServiceMockRecorder is the mock recorder for MockAccountService
type MockAccountServiceMockRecorder struct {
	mock *MockAccountService
}

// NewMockAccountService creates a new mock instance
func NewMockAccountService(ctrl *gomock.Controller) *MockAccountService {
	mock := &MockAccountService{ctrl: ctrl}
	mock.recorder = &MockAccountServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccountService) EXPECT() *MockAccountServiceMockRecorder {
	return m.recorder
}

// GetAmount mocks base method
func (m *MockAccountService) GetAmount() (float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAmount")
	ret0, _ := ret[0].(float32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAmount indicates an expected call of GetAmount
func (mr *MockAccountServiceMockRecorder) GetAmount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAmount", reflect.TypeOf((*MockAccountService)(nil).GetAmount))
}

// FindPendingAssets mocks base method
func (m *MockAccountService) FindPendingAssets() (*[]domain.Asset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPendingAssets")
	ret0, _ := ret[0].(*[]domain.Asset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPendingAssets indicates an expected call of FindPendingAssets
func (mr *MockAccountServiceMockRecorder) FindPendingAssets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPendingAssets", reflect.TypeOf((*MockAccountService)(nil).FindPendingAssets))
}

// FindAllAssets mocks base method
func (m *MockAccountService) FindAllAssets() (*[]domain.Asset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllAssets")
	ret0, _ := ret[0].(*[]domain.Asset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllAssets indicates an expected call of FindAllAssets
func (mr *MockAccountServiceMockRecorder) FindAllAssets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllAssets", reflect.TypeOf((*MockAccountService)(nil).FindAllAssets))
}

// GetBalance mocks base method
func (m *MockAccountService) GetBalance(startDate, endDate time.Time) (float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", startDate, endDate)
	ret0, _ := ret[0].(float32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance
func (mr *MockAccountServiceMockRecorder) GetBalance(startDate, endDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockAccountService)(nil).GetBalance), startDate, endDate)
}

// CheckAssetWithCloserPriceExists mocks base method
func (m *MockAccountService) CheckAssetWithCloserPriceExists(price, limit float32) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAssetWithCloserPriceExists", price, limit)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAssetWithCloserPriceExists indicates an expected call of CheckAssetWithCloserPriceExists
func (mr *MockAccountServiceMockRecorder) CheckAssetWithCloserPriceExists(price, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAssetWithCloserPriceExists", reflect.TypeOf((*MockAccountService)(nil).CheckAssetWithCloserPriceExists), price, limit)
}

// Withdraw mocks base method
func (m *MockAccountService) Withdraw(amount float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// Withdraw indicates an expected call of Withdraw
func (mr *MockAccountServiceMockRecorder) Withdraw(amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockAccountService)(nil).Withdraw), amount)
}

// Deposit mocks base method
func (m *MockAccountService) Deposit(amount float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deposit", amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deposit indicates an expected call of Deposit
func (mr *MockAccountServiceMockRecorder) Deposit(amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deposit", reflect.TypeOf((*MockAccountService)(nil).Deposit), amount)
}

// CreateAsset mocks base method
func (m *MockAccountService) CreateAsset(amount, price float32, time time.Time) (*domain.Asset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAsset", amount, price, time)
	ret0, _ := ret[0].(*domain.Asset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAsset indicates an expected call of CreateAsset
func (mr *MockAccountServiceMockRecorder) CreateAsset(amount, price, time interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAsset", reflect.TypeOf((*MockAccountService)(nil).CreateAsset), amount, price, time)
}

// SellAsset mocks base method
func (m *MockAccountService) SellAsset(assetID primitive.ObjectID, price float32, time time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SellAsset", assetID, price, time)
	ret0, _ := ret[0].(error)
	return ret0
}

// SellAsset indicates an expected call of SellAsset
func (mr *MockAccountServiceMockRecorder) SellAsset(assetID, price, time interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SellAsset", reflect.TypeOf((*MockAccountService)(nil).SellAsset), assetID, price, time)
}
