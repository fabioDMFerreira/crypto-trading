// Code generated by MockGen. DO NOT EDIT.
// Source: domain/assetPrice.go

// Package mock_domain is a generated GoMock package.
package mocks

import (
	domain "github.com/fabiodmferreira/crypto-trading/domain"
	gomock "github.com/golang/mock/gomock"
	bson "go.mongodb.org/mongo-driver/bson"
	mongo "go.mongodb.org/mongo-driver/mongo"
	reflect "reflect"
	time "time"
)

// MockAssetPriceRepository is a mock of AssetPriceRepository interface
type MockAssetPriceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAssetPriceRepositoryMockRecorder
}

// MockAssetPriceRepositoryMockRecorder is the mock recorder for MockAssetPriceRepository
type MockAssetPriceRepositoryMockRecorder struct {
	mock *MockAssetPriceRepository
}

// NewMockAssetPriceRepository creates a new mock instance
func NewMockAssetPriceRepository(ctrl *gomock.Controller) *MockAssetPriceRepository {
	mock := &MockAssetPriceRepository{ctrl: ctrl}
	mock.recorder = &MockAssetPriceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAssetPriceRepository) EXPECT() *MockAssetPriceRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockAssetPriceRepository) Create(ohlc *domain.OHLC, asset string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ohlc, asset)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockAssetPriceRepositoryMockRecorder) Create(ohlc, asset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAssetPriceRepository)(nil).Create), ohlc, asset)
}

// FindAll mocks base method
func (m *MockAssetPriceRepository) FindAll(filter interface{}) (*[]domain.AssetPrice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", filter)
	ret0, _ := ret[0].(*[]domain.AssetPrice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll
func (mr *MockAssetPriceRepositoryMockRecorder) FindAll(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockAssetPriceRepository)(nil).FindAll), filter)
}

// Aggregate mocks base method
func (m *MockAssetPriceRepository) Aggregate(pipeline mongo.Pipeline) (*[]bson.M, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Aggregate", pipeline)
	ret0, _ := ret[0].(*[]bson.M)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Aggregate indicates an expected call of Aggregate
func (mr *MockAssetPriceRepositoryMockRecorder) Aggregate(pipeline interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Aggregate", reflect.TypeOf((*MockAssetPriceRepository)(nil).Aggregate), pipeline)
}

// GetLastAssetsPrices mocks base method
func (m *MockAssetPriceRepository) GetLastAssetsPrices(asset string, limit int) (*[]domain.AssetPrice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastAssetsPrices", asset, limit)
	ret0, _ := ret[0].(*[]domain.AssetPrice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastAssetsPrices indicates an expected call of GetLastAssetsPrices
func (mr *MockAssetPriceRepositoryMockRecorder) GetLastAssetsPrices(asset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastAssetsPrices", reflect.TypeOf((*MockAssetPriceRepository)(nil).GetLastAssetsPrices), asset, limit)
}

// BulkCreate mocks base method
func (m *MockAssetPriceRepository) BulkCreate(documents *[]bson.M) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkCreate", documents)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkCreate indicates an expected call of BulkCreate
func (mr *MockAssetPriceRepositoryMockRecorder) BulkCreate(documents interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkCreate", reflect.TypeOf((*MockAssetPriceRepository)(nil).BulkCreate), documents)
}

// MockAssetsPricesService is a mock of AssetsPricesService interface
type MockAssetsPricesService struct {
	ctrl     *gomock.Controller
	recorder *MockAssetsPricesServiceMockRecorder
}

// MockAssetsPricesServiceMockRecorder is the mock recorder for MockAssetsPricesService
type MockAssetsPricesServiceMockRecorder struct {
	mock *MockAssetsPricesService
}

// NewMockAssetsPricesService creates a new mock instance
func NewMockAssetsPricesService(ctrl *gomock.Controller) *MockAssetsPricesService {
	mock := &MockAssetsPricesService{ctrl: ctrl}
	mock.recorder = &MockAssetsPricesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAssetsPricesService) EXPECT() *MockAssetsPricesServiceMockRecorder {
	return m.recorder
}

// GetLastAssetsPrices mocks base method
func (m *MockAssetsPricesService) GetLastAssetsPrices(asset string, limit int) (*[]domain.AssetPrice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastAssetsPrices", asset, limit)
	ret0, _ := ret[0].(*[]domain.AssetPrice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastAssetsPrices indicates an expected call of GetLastAssetsPrices
func (mr *MockAssetsPricesServiceMockRecorder) GetLastAssetsPrices(asset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastAssetsPrices", reflect.TypeOf((*MockAssetsPricesService)(nil).GetLastAssetsPrices), asset, limit)
}

// Create mocks base method
func (m *MockAssetsPricesService) Create(ohlc *domain.OHLC, asset string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ohlc, asset)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockAssetsPricesServiceMockRecorder) Create(ohlc, asset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAssetsPricesService)(nil).Create), ohlc, asset)
}

// FetchAndStoreAssetPrices mocks base method
func (m *MockAssetsPricesService) FetchAndStoreAssetPrices(asset string, endDate time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAndStoreAssetPrices", asset, endDate)
	ret0, _ := ret[0].(error)
	return ret0
}

// FetchAndStoreAssetPrices indicates an expected call of FetchAndStoreAssetPrices
func (mr *MockAssetsPricesServiceMockRecorder) FetchAndStoreAssetPrices(asset, endDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAndStoreAssetPrices", reflect.TypeOf((*MockAssetsPricesService)(nil).FetchAndStoreAssetPrices), asset, endDate)
}
