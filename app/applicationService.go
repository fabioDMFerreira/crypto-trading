package app

import (
	"github.com/fabiodmferreira/crypto-trading/domain"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

// Service interacts with applications, log events and application state repositories
type Service struct {
	repo          *Repository
	stateRepo     domain.ApplicationExecutionStateRepository
	logEventsRepo domain.EventsLog
}

// NewService returns an instance of applications service
func NewService(repo *Repository, stateRepo domain.ApplicationExecutionStateRepository, eventsLogRepo domain.EventsLog) *Service {
	return &Service{repo, stateRepo, eventsLogRepo}
}

// GetLastState returns the last application state
func (a *Service) GetLastState(appID primitive.ObjectID) (*domain.ApplicationExecutionState, error) {
	return a.stateRepo.FindLast(bson.M{"executionId": appID})
}

// FindAll returns all applications in the repository
func (a *Service) FindAll() (*[]domain.Application, error) {
	return a.repo.FindAll()
}

// DeleteByID deletes the application with the id passed by argument
func (a *Service) DeleteByID(id string) error {
	return a.repo.repo.DeleteByID(id)
}

// GetLogEvents returns all log events generated by a application
func (a *Service) GetLogEvents(appID primitive.ObjectID) (*[]domain.EventLog, error) {
	return a.logEventsRepo.FindAll(bson.M{"applicationID": appID})
}
